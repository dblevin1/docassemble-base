---
metadata:
  description: >-
    These are basic questions common to a lot of different scenarios
  authors:
    - name: Jonathan Pyle
      organization: Example, Inc.
  revision_date: 2015-09-28
comment: >-
  A "metadata" section contains information about who wrote the
  YAML file and how it is intended to be used.
---
modules:
  - docassemble.base.legal
comment: >-
  A "modules" section imports functions from Python modules.  The
  basic building blocks of docassemble variables are defined in the
  docassemble.legal module.
---
default role: client
code: |
  if current_info['user']['is_authenticated'] and 'advocate' in current_info['user']['roles']:
    user = advocate
    role = 'advocate'
  else:
    user = client
    role = 'client'
  update_info(user, role, current_info)
---
error: role_event
question: You are done for now.
subquestion: |
  % if 'advocate' in role_needed:
    An advocate needs to review your answers before you can proceed.

    Please remember the following link and come back to it when you receive notice to do so:

    [${ interview_url() }](${ interview_url() })
    
  % else:
    Thanks, the client needs to resume the interview now.
  % endif

decoration: exit
buttons:
  - Exit: leave
---
objects:
  - case: Case
  - client: Individual
  - spouse: Individual
  - advocate: Individual
  - pleading: LegalFiling
  - jurisdiction: Jurisdiction
  - court: Court
comment: >-
  An "objects" section defines variables that are Python objects.  The
  object types here are defined in the docassemble.legal module.
---
mandatory: True
code: |
  court.jurisdiction = jurisdiction
  case.court = court
  pleading.case = case
---
image sets:
  freepik:
    attribution: |
      Icon made by [Freepik](http://www.flaticon.com/authors/freepik)
    images:
      bills: money146.svg
      children: children2.svg
      finishline: checkered12.svg
      gavel: court.svg
      gaveljudge: magistrate.svg
      home: home168.svg
      piggybank: savings1.svg
      scalesofjustice: judge1.svg
      stocks: increasing10.svg
      wallet: commerce.svg
      document: contract11.svg
      calendar: calendar146.svg
      picture: picture64.svg
      parentchild: man32.svg
      coins: coins36.svg
      exit: open203.svg
comment: |
  Here we pre-define some icon files so that we can easily refer to
  them later.  These files are located in the docassemble.base package
  in the subdirectory docassemble/base/data/static.
---
generic object: Individual
question: |
  ${ x.is_are_you(capitalize=True) } a defendant in this case?
yesno: x.is_defendant
comment: |
  After defining the basic variables, we define some standard questions.
---
generic object: Individual
field: x.marital_status
question: |
  What is ${ x.possessive('marital status') }?
choices:
  - Married
  - Single
  - Divorced
  - Separated
---
field: user_understands_how_to_use_signature_feature
question: Instructions for signing your name
subquestion: |
  On the next screen, you will see a box in which you can sign your
  name using your mouse, track pad, or touch screen.  If you make a
  mistake, you can press "Clear" and try again.  For best results, try
  signing your name *slowly*.
buttons:
  - Continue: continue
---
generic object: Individual
comment: |
  docassemble can collect signatures from users, who can write their
  signature with their finger on a touchscreen device, or use a mouse
  or trackpad.  The signatures can be added to documents.
question: |
  Please sign your name below.
signature: x.signature
need: user_understands_how_to_use_signature_feature
under: |
  ${ x.name }
---
template: blank_signature
content: |
  \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_
---
template: empty_signature
content: |
  \_\_\_[Your signature here]\_\_\_
---
generic object: Individual
question: |
  Is this ${ x.possessive('signature') }?
subquestion: |
  ${ x.signature.show() }
sets:
  - x.signature_verified
buttons:
  - "Yes":
      generic object: Individual
      code: |
        x.signature_verified = True
  - "No":
      generic object: Individual
      code: |
        x.signature_verified = False
  - "Let me try again":
      generic object: Individual
      code: |
        answers = dict()
        remove('x.signature')
---
generic object: Individual
question: ${ x.is_are_you(capitalize=True) } a citizen of the United States?
yesno: x.is_citizen
---
field: user_understands_no_attorney_client_relationship
question: >-
  Your use of this system does not mean that you have a lawyer.  Do
  you understand this?
buttons:
  - "I understand": understands
  - code: |
      [{'does not understand':"I do not understand"}, {'unsure':"I'm not sure"}]
comment: |
  You can specify whether you want the multiple choices to appear as
  buttons by using the word "buttons" instead of the word "choices."
  Also, the example below shows how you can use Python code to
  generate the selections of multiple-choice question.  The code is
  evaluated at the time the question is asked.
---
question: |
  What is the basic airspeed velocity?
fields:
  - Velocity: airspeed_velocity
---
generic object: Individual
question: >-
  What is ${ x.possessive('date of birth') }?
fields:
  - Date of birth: x.birthdate
    datatype: date
comment: |
  docassemble allows you to write "generic" questions.  For example,
  if your code uses a variable called user.birthdate, docassemble will
  first look for a question that sets user.birthdate specifically, but
  if it does not find it, it will look for a question for which the
  generic object property is set to the object type of the user
  object, which is Individual, and where the question sets the
  variable x.birthdate.
  
  It will find that question here.  The question uses the possessive
  function, which is a method of the Individual class.  The result is
  that the question will be "What is your date of birth?" if x is the
  user, but will otherwise ask "What is Jane Doe's date of birth?"
---
generic object: Individual
question: >-
  What is ${ x.possessive('e-mail address') }?
fields:
  - E-mail: x.email
    datatype: email
---
generic object: Individual
question: >-
  What is ${ x.possessive('gender') }?
field: x.gender
choices:
  - Male: male
  - Female: female
  - Other: other
comment: |
  By using "generic" questions, you can write a single question that
  works in a variety of circumstances, saving you a lot of time.  And
  if you ever want to use a more specific question for a specific
  variable, you can.  For example, if your code calls for
  spouse.birthdate, you may to ask the question in a different way.
  (E.g., "What is the birthdate of your lovely spouse?  If you don't
  know this, you are in deep trouble!")  You would do this by defining
  a non-generic question that sets spouse.birthdate, in which case
  docassemble would use that question instead of the generic question.
---
generic object: Individual
question: |
  What is ${ x.object_possessive('name') }?
fields:
  - First Name: x.name.first
  - Middle Name: x.name.middle
    required: False
  - Last Name: x.name.last
comment: |
  If the object does not have a name yet, generic questions can refer
  to it by the name of the variable itself.  For example, suppose you
  create an object, case.judge, with the class of Individual.  If the
  name of case.judge is ever needed, docassemble will use the question
  below to ask "What is the name of the judge in the case?"  If the
  object is called user, it will ask "What is your name?"  If the
  object is called village_idiot, it will ask "What is the village
  idiot's name?"
---
generic list object: Individual
question: |
  What is the name of the ${ ordinal(i) } ${ x.object_name() }?
fields:
  - First Name: x[i].name.first
  - Middle Name: x[i].name.middle
    required: False
  - Last Name: x[i].name.last
comment: |
  Generic questions can also use indices, for example to fill out the
  names of a list of people.  (E.g., case.plaintiff.)

  This example also illustates how the author can control whether the
  user can leave a field blank.  By default, all fields are required,
  but the author can add required: False to a field to indicate that
  the field can be left blank.
---
generic list object: Individual
question: |
  What is ${ x.possessive(ordinal(i) + " child") }'s name?
fields:
  - First Name: x.child[i].name.first
  - Middle Name: x.child[i].name.middle
    required: False
  - Last Name: x.child[i].name.last
    default: ${ x.name.last }
comment: |
  Example 1: What is your second child's name?
  Example 2: What is John Doe's first child's name?
---
comment: |
  As you can see in the following examples, it can get a little bit
  complicated to use lots of functions within questions.  However, it
  ultimately saves you a lot of trouble, because without the
  functions, you would have to define multiple different questions to
  ask the same thing in different contexts.
generic object: Individual
code: |
  x.child.gathering = True
  if x.has_children:
    if x.child.number_gathered() == 0:
      newchild = x.child.addObject(Individual)
    while x.has_other_children:
      newchild = x.child.addObject(Individual)
      del x.has_other_children
  x.child.gathering = False
  x.child.gathered = True
---
generic object: Individual
question: >-
  ${ x.do_question('have', capitalize=True) } any children?
yesno: x.has_children
decoration: children
comment: |
  Example 1: Do you have any children?
  Example 2: Does Jane Doe have any children?
---
generic object: Individual
question: |
  So far, you have told me about
  ${ x.possessive(x.child.number_gathered_as_word()) }
  ${ x.child.as_noun() }, ${ x.child }.
  ${ x.do_question('have', capitalize=True) } any other children?
yesno: x.has_other_children
decoration: children
comment: |
  Example 1: So far, you have told me about John Doe's two children, 
  Sally Doe and Harold Doe.  Does John Doe have any other children?

  Example 2: So far, you have told me about your one child, Kathleen 
  Smith.  Do you have any other children?
---
generic object: PartyList
question: |
  You have told me that there ${ x.does_verb("is", ) }
  ${ x.number_gathered_as_word() } ${ x.as_noun() }, ${ x }.  Is there another
  ${ x.as_singular_noun() }?
yesno: x.there_is_another
---
generic object: Individual
question: |
  ${ x.is_are_you(capitalize=True) } a plaintiff in this case?
subquestion: |
  A "plaintiff" is a person who starts a case by filing a lawsuit
  against a person called a "defendant."  Plaintiffs and defendants
  are the "parties" in a case.
decoration: scalesofjustice
yesno: x.is_plaintiff
---
comment: |
  Here are some standard questions that ask about a person's income
  and assets.  These examples illustrate that if you do not want a
  field to be labeled, you can use "" as the label name.
generic object: Individual
question: How much ${ x.do_question("make") } from employment?
decoration: bills
fields:
  - Income: x.income.employment.value
    datatype: currency
  - "": x.income.employment.period
    code: |
      period_list()
---
generic object: Individual
question: How much ${ x.do_question("make") } from self-employment?
decoration: bills
fields:
  - Income: x.income.selfemployment.value
    datatype: currency
  - "": x.income.selfemployment.period
    code: |
      period_list()
---
generic object: Individual
question: How much ${ x.do_question("make") } from SSI?
decoration: bills
fields:
  - Income: x.income.ssi.value
    datatype: currency
  - "": x.income.ssi.period
    code: |
      period_list()
---
generic object: Individual
question: How much ${ x.do_question("make") } from cash assistance (Temporary Assistance to Needy Families or TANF)?
decoration: bills
fields:
  - Income: x.income.tanf.value
    datatype: currency
  - "": x.income.tanf.period
    code: |
      period_list()
---
generic object: Individual
question: How much ${ x.do_question("have") } in ${ x.pronoun_possessive("checking account") }?
decoration: piggybank
fields:
  - Amount: x.asset.checking.value
    datatype: currency
---
generic object: Individual
question: How much ${ x.do_question("have") } in ${ x.pronoun_possessive("savings account") }?
decoration: piggybank
fields:
  - Amount: x.asset.savings.value
    datatype: currency
---
generic object: Individual
question: How much ${ x.do_question("have") } in stocks and bonds?
decoration: stocks
fields:
  - Amount: x.asset.stocksbonds.value
    datatype: currency
---
generic object: Individual
question: What kinds of income ${ x.do_question("have") }?
decoration: bills
fields:
  - Employment: x.income.employment.exists
    datatype: yesno
  - Self-employment: x.income.selfemployment.exists
    datatype: yesno
  - SSI: x.income.ssi.exists
    datatype: yesno
  - Cash assistance: x.income.tanf.exists
    datatype: yesno
---
generic object: Individual
question: What kinds of assets ${ x.do_question("own") }?
decoration: piggybank
fields:
  - Checking Account: x.asset.checking.exists
    datatype: yesno
  - Savings Account: x.asset.savings.exists
    datatype: yesno
  - Stocks and Bonds: x.asset.stocksbonds.exists
    datatype: yesno
...