---
metadata:
  description: |
    These are basic questions common to a variety of scenarios
  authors:
    - name: Jonathan Pyle
      organization: none
  revision_date: 2015-10-25
comment: |
  A "metadata" section contains information about who wrote the
  YAML file and how it is intended to be used.
---
modules:
  - docassemble.base.legal
comment: |
  A "modules" section imports functions from Python modules.  The
  docassemble.base.legal module defines some object classes and functions
  that are useful in legal applications.
---
default role: client
code: |
  if current_info['user']['is_authenticated'] and \
     'advocate' in current_info['user']['roles']:
    user = advocate
    role = 'advocate'
  else:
    user = client
    role = 'client'
  update_info(user, role, current_info)
comment: |
  The default role is "client" and an optional role is "advocate."
  Unless otherwise specified, all questions require the user to be a
  "client."  The user is assumed to have the "advocate" role in this
  interview if the user is logged in and the user has "advocate" as a
  user role.

  The functions in docassemble.base.legal need to know who the user
  is.  The update_info function communicates that information to the
  docassemble.base.legal module.  Since the code is paired with the
  "default role" declaration, this code is run as "initial" code,
  meaning that it is run every time docassemble processes the
  interview (i.e., every time the screen loads).
---
event: role_event
question: You are done for now.
subquestion: |
  % if 'advocate' in role_needed:
    An advocate needs to review your answers before you can proceed.

    Please remember the following link and come back to it when you
    receive notice to do so:

    [${ interview_url() }](${ interview_url() })
    
  % else:
    Thanks, the client needs to resume the interview now.
  % endif

decoration: exit
buttons:
  - Exit: leave
comment: |
  The "event" declaration acts like "sets."  When docassemble
  needs to ask a question that requires a role other than the user's
  role, it displays a special message for the user.  You need to
  configure this message by defining a question tagged with "event:
  role_event."  docassemble will search for this question just as
  it searches for a question to define a variable.
---
objects:
  - case: Case
  - client: Individual
  - spouse: Individual
  - advocate: Individual
  - pleading: LegalFiling
  - jurisdiction: Jurisdiction
  - court: Court
comment: |
  An "objects" section defines variables that are docassemble objects.
  The object types here are defined in the docassemble.base.core and
  docassemble.base.legal modules.
---
code: |
  court.jurisdiction = jurisdiction
  case.court = court
  pleading.case = case
comment: |
  This code sets some basic relations among the objects created in the
  objects block of this YAML file.
---
image sets:
  freepik:
    attribution: |
      Icon made by [Freepik](http://www.flaticon.com/authors/freepik)
    images:
      bills: money146.svg
      children: children2.svg
      finishline: checkered12.svg
      gavel: court.svg
      gaveljudge: magistrate.svg
      home: home168.svg
      piggybank: savings1.svg
      scalesofjustice: judge1.svg
      stocks: increasing10.svg
      wallet: commerce.svg
      document: contract11.svg
      calendar: calendar146.svg
      picture: picture64.svg
      parentchild: man32.svg
      coins: coins36.svg
      exit: open203.svg
      man: silhouette21.svg
      person: silhouette21.svg
      woman: women13.svg
      girl: girl4.svg
      male: male244.svg
      female: female243.svg
      map: map32.svg
comment: |
  Here we pre-define some icon files so that we can easily refer to
  them later.  These files are located in the docassemble.base package
  in the subdirectory docassemble/base/data/static.
---
generic object: Individual
question: |
  What is ${ x.possessive('Social Security Number') }?
fields:
  - Social Security Number: x.ssn
---
generic object: Individual
question: |
  What is ${ x.possessive('date of birth') }?
fields:
  - Date of Birth: x.birthdate
    datatype: date
comment: |
  docassemble allows you to write "generic" questions.  For example,
  if your code uses a variable called user.birthdate, docassemble will
  first look for a question that sets user.birthdate specifically, but
  if it does not find it, it will look for a question for which the
  generic object property is set to the object type of the user
  object, which is Individual, and where the question sets the
  variable x.birthdate.
  
  It will find that question here.  The question uses the possessive
  function, which is a method of the Individual class.  The result is
  that the question will be "What is your date of birth?" if x is the
  user, but will otherwise ask "What is Jane Doe's date of birth?"

  By using "generic" questions, you can write a single question that
  works in a variety of circumstances, saving you a lot of time.  And
  if you ever want to use a more specific question for a specific
  variable, you can.  For example, if your code calls for
  spouse.birthdate, you may to ask the question in a different way.
  (E.g., "What is the birthdate of your lovely spouse?  If you don't
  know this, you are in deep trouble!")  You would do this by defining
  a non-generic question that sets spouse.birthdate, in which case
  docassemble would use that question instead of the generic question.
---
generic object: Individual
question: |
  ${ x.is_are_you(capitalize=True) } a defendant in this case?
yesno: x.is_defendant
---
generic object: Individual
field: x.marital_status
question: |
  What is ${ x.possessive('marital status') }?
choices:
  - Married: Married
  - Single: Single
  - Divorced: Divorced
  - "*Separated*": Separated
comment: |
  This is an example of a multiple-choice question.  Each of the
  choices can be a key/value pair, or it can be a single text item.
  If the choice is a key/value pair, the key is the label that is
  shown to the user and value is the value to which the variable will
  be set.
  
  This example also illustrates that Markdown can be used to add
  formatting to labels.
---
field: user_understands_how_to_use_signature_feature
question: Instructions for signing your name
subquestion: |
  On the next screen, you will see a box in which you can sign your
  name using your mouse, track pad, or touch screen.  If you make a
  mistake, you can press "Clear" and try again.  For best results, try
  signing your name *slowly*.
---
generic object: Individual
question: |
  Please sign your name below.
signature: x.signature
need:
  - x.name.first
  - user_understands_how_to_use_signature_feature
under: |
  ${ x.name }
comment: |
  docassemble can collect signatures from users, who can write their
  signature with their finger on a touchscreen device, or use a mouse
  or trackpad.  The signatures can be added to documents.
---
template: blank_signature
content: |
  \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_
comment: |
  This template can be used for a blank line that someone might sign.
---
template: empty_signature
content: |
  \_\_\_[Your signature here]\_\_\_
comment: |
  This template can be used in place of a user's signature.  It is a
  good practice to show users where their signature would go on a
  document before the user is asked for his or her signature.
---
generic object: Individual
question: |
  Is this ${ x.possessive('signature') }?
subquestion: |
  ${ x.signature.show() }
sets:
  - x.signature_verified
buttons:
  - "Yes":
      generic object: Individual
      code: |
        x.signature_verified = True
  - "No":
      generic object: Individual
      code: |
        x.signature_verified = False
  - "Let me try again":
      generic object: Individual
      code: |
        force_ask('x.signature')
comment: |
  Note that in order for code or a question embedded within
  buttons/choices to use the special variable "x," you need to declare
  a generic object within the embedded code or question.
---
generic object: Individual
question: |
  ${ x.is_are_you(capitalize=True) } a citizen of the United States?
yesno: x.is_citizen
---
field: user_understands_no_attorney_client_relationship
question: |
  Your use of this system does not mean that you have a lawyer.  Do
  you understand this?
buttons:
  - "I understand": understands
  - code: |
      [{'does not understand':"I do not understand"}, {'unsure':"I'm not sure"}]
comment: |
  You can specify whether you want the multiple choices to appear as
  buttons by using the word "buttons" instead of the word "choices."

  Also, the example above shows how you can use Python code to
  generate the selections of multiple-choice question.  The code is
  evaluated at the time the question is asked.
---
generic object: Individual
question: |
  What is ${ x.possessive('e-mail address') }?
fields:
  - E-mail: x.email
    datatype: email
comment: |
  The datatype "email" presents a text box that is like ordinary text
  boxes except that validation is applied that checks to make sure the
  e-mail address is valid.  Also, on supporting mobile web browsers,
  there is a different keyboard option (e.g, the @ sign is readily
  available).
---
generic object: Individual
question: |
  What is ${ x.possessive('gender') }?
field: x.gender
choices:
  - "Male :male:": male
  - "Female :female:": female
  - Other: other
comment: |
  You can include images "emoji-style" by putting colons around the
  image name.  This feature works within labels as well as within question
  text.
---
generic object: Individual
question: |
  What is ${ x.object_possessive('name') }?
fields:
  - First Name: x.name.first
    default: ${ x.first_name_hint() }
  - Middle Name: x.name.middle
    required: False
  - Last Name: x.name.last
    default: ${ x.last_name_hint() }
  - Suffix: x.name.suffix
    required: False
    code: |
      name_suffix()
comment: |
  If the object does not have a name yet, generic questions can refer
  to it by the name of the variable itself.  For example, suppose you
  create an object, case.judge, with the class of Individual.  If the
  name of case.judge is ever needed, docassemble will use the question
  above to ask "What is the name of the judge in the case?"  If the
  object is called user, it will ask "What is your name?"  If the
  object is called village_idiot, it will ask "What is the village
  idiot's name?"
---
generic list object: Individual
question: |
  What is the name of the ${ x[i].object_name() }?
fields:
  - First Name: x[i].name.first
  - Middle Name: x[i].name.middle
    required: False
  - Last Name: x[i].name.last
  - Suffix: x[i].name.suffix
    required: False
    code: |
      name_suffix()
comment: |
  Generic questions can also use indices, for example to fill out the
  names of a list of people.  (E.g., case.plaintiff.)

  This example also illustates how the author can control whether the
  user can leave a field blank.  By default, all fields are required,
  but the author can add required: False to a field to indicate that
  the field can be left blank.
---
generic list object: Individual
question: |
  What is ${ x.possessive(ordinal(i) + " child") }'s name?
fields:
  - Somebody already mentioned: x.child[i]
    datatype: object
    disable others: true
    choices: case.all_known_people()
    exclude:
      - x
      - x.child
  - First Name: x.child[i].name.first
  - Middle Name: x.child[i].name.middle
    required: False
  - Last Name: x.child[i].name.last
    default: ${ x.name.last }
  - Suffix: x.child[i].name.suffix
    required: False
    code: |
      name_suffix()
comment: |
  This illustrates the use of the "possessive" method of the class
  Individual.  Depending on who x is, this question will ask different
  things:

  Example 1: What is your second child's name?

  Example 2: What is John Doe's first child's name?
---
generic object: Individual
code: |
  x.child.gathering = True
  if x.has_children:
    if x.child.number_gathered() == 0:
      x.child.appendObject(Individual)
    while x.has_other_children:
      x.child.appendObject(Individual)
      del x.has_other_children
  x.child.gathering = False
  x.child.gathered = True
---
generic object: Individual
question: |
  ${ x.do_question('have', capitalize=True) } any children?
yesno: x.has_children
decoration: children
comment: |
  This illustrates the use of the "do_question" method of the class
  Individual.  Depending on who x is, this question will ask different
  things:

  Example 1: Do you have any children?

  Example 2: Does Jane Doe have any children?
---
generic object: Individual
question: |
  So far, you have told me about
  ${ x.possessive(x.child.number_gathered_as_word()) }
  ${ x.child.as_noun() }, ${ x.child }.
  ${ x.do_question('have', capitalize=True) } any other children?
yesno: x.has_other_children
decoration: children
comment: |
  This illustrates the use of various methods of the class Individual.
  Depending on who x is, this question will ask different things:

  Example 1: So far, you have told me about John Doe's two children, 
  Sally Doe and Harold Doe.  Does John Doe have any other children?

  Example 2: So far, you have told me about your one child, Kathleen 
  Smith.  Do you have any other children?
---
generic object: PartyList
question: |
  You have told me that there ${ x.does_verb("is") }
  ${ x.number_gathered_as_word() } ${ x.as_noun() }, ${ x }.
  Is there another ${ x.as_singular_noun() }?
yesno: x.there_is_another
comment: |
  It is possible to write highly generalized "generic" questions that
  use functions that ask questions of users based on variable names
  and linguistic variations of variable names.  For that reason, it is
  a good practice to give your variables meaningful, plain-English
  names.

  For example, if you create a PartyList called "plaintiff," this
  generic question will ask something like: "You have told me that
  there is one plaintiff, John Smith.  Is there another plaintiff?"
  This would not be possible if your variable name was something that
  only made sense to you, like "bad_guys_list_two."
---
generic object: Individual
question: |
  ${ x.is_are_you(capitalize=True) } a plaintiff in this case?
subquestion: |
  A "plaintiff" is a person who starts a case by filing a lawsuit
  against a person called a "defendant."  Plaintiffs and defendants
  are the "parties" in a case.
decoration: scalesofjustice
yesno: x.is_plaintiff
---
generic object: Individual
question: |
  How much ${ x.do_question("make") } from ${ i }?
fields:
  - Amount: x.income[i].value
    datatype: currency
  - "": x.income[i].period
    datatype: number
    code: |
      period_list()
---
generic object: Individual
question: |
  How much ${ x.do_question("make") } from employment?
decoration: bills
fields:
  - Employment Income: x.income['employment'].value
    datatype: currency
  - "": x.income['employment'].period
    datatype: number
    code: |
      period_list()
comment: |
  If you do not want a field to be labeled, you can use "" as the
  label name.

  The function period_list() comes from docassemble.base.legal.  It
  causes the variable to be set to a number representing periods per
  year.

  The datatype "currency" is like the datatype "number" except that it
  is displayed along with a locale-specific currency symbol.
---
generic object: Individual
question: |
  How much ${ x.do_question("make") } from self-employment?
decoration: bills
fields:
  - Self-employment Income: x.income['self employment'].value
    datatype: currency
  - "": x.income['self employment'].period
    datatype: number
    code: |
      period_list()
---
generic object: Individual
question: |
  How much ${ x.do_question("make") } from SSI?
decoration: bills
fields:
  - SSI Income: x.income['SSI'].value
    datatype: currency
  - "": x.income['SSI'].period
    datatype: number
    code: |
      period_list()
---
generic object: Individual
question: |
  How much ${ x.do_question("make") } from cash assistance 
  (Temporary Assistance to Needy Families or TANF)?
decoration: bills
fields:
  - TANF Income: x.income['TANF'].value
    datatype: currency
  - "": x.income['TANF'].period
    datatype: number
    code: |
      period_list()
---
generic object: Individual
question: |
  How much ${ x.do_question("have") } in 
  ${ i }?
fields:
  - Amount: x.asset[i].value
    datatype: currency
---
generic object: Individual
question: |
  How much ${ x.do_question("have") } in 
  ${ x.pronoun_possessive("checking account") }?
decoration: piggybank
fields:
  - Amount in Checking Account: x.asset['checking account'].value
    datatype: currency
---
generic object: Individual
question: |
  How much ${ x.do_question("have") } in 
  ${ x.pronoun_possessive("savings account") }?
decoration: piggybank
fields:
  - Amount in Savings Account: x.asset['savings account'].value
    datatype: currency
---
generic object: Individual
question: |
  How much ${ x.do_question("have") } in stocks and bonds?
decoration: stocks
fields:
  - Amount in Stocks and Bonds: x.asset['stocks and bonds'].value
    datatype: currency
---
generic object: Individual
question: |
  What kinds of income ${ x.do_question("have") }?
decoration: bills
fields:
  - Employment: x.income['employment'].exists
    datatype: yesnowide
  - Self-employment: x.income['self employment'].exists
    datatype: yesnowide
  - SSI: x.income['SSI'].exists
    datatype: yesnowide
  - Cash assistance: x.income['TANF'].exists
    datatype: yesnowide
comment: |
  The datatype "yesnowide" is just like the data type "yesno" except
  that it fills the width of the form rather than aligning with other
  fields that use labels.
---
generic object: Individual
question: |
  ${ x.do_question("have", capitalize=True) } income from ${ i }?
yesno: x.income[i].exists
---
generic object: Individual
question: |
  ${ x.do_question("own", capitalize=True) } any ${ i }?
yesno: x.asset[i].exists
---
generic object: Individual
question: |
  What kinds of assets ${ x.do_question("own") }?
decoration: piggybank
fields:
  - Checking Account: x.asset['checking account'].exists
    datatype: yesnowide
  - Savings Account: x.asset['savings account'].exists
    datatype: yesnowide
  - Stocks and Bonds: x.asset['stocks and bonds'].exists
    datatype: yesnowide
...