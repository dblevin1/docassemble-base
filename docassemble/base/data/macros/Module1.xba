<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<!--
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
-->
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Module1" script:language="StarBasic">REM  *****  BASIC  *****
function MakePropertyValue(aName as string, aValue as variant)
    dim Arg as new com.sun.star.beans.PropertyValue
    Arg.name = aName
    Arg.value = aValue
    MakePropertyValue = Arg
end function

function AddPropertyValue(aArray, aName as string, aValue as variant)
   Dim result
   result = aArray
   dim theIndex as integer
   theIndex = UBound(result)-LBound(result)
   ReDim Preserve result(the_index+1)
   result(theIndex) = MakePropertyValue(aName, aValue)
   AddPropertyValue = result
end function

sub PysIndexer(sDocUrl as string)

' Test
dim oDocument as object
dim dispatcher as object

if FileExists(sDocUrl) then

' TEst

    oDocument = starDesktop.loadComponentFromUrl(convertToUrl(sDocUrl), "_blank", 0, Array())
    dispatcher = createUnoService("com.sun.star.frame.DispatchHelper")
    dispatcher.executeDispatch(oDocument.CurrentController.Frame, ".uno:UpdateAllIndexes", "", 0, Array())

    oDocument.store()

end if

Wait 400
ThisComponent.close(True)
Wait 400
starDesktop.terminate

end sub

sub ConvertToPdf(sDocUrl as string, sPdfURL as string, updateIndex as boolean, method as string)

' Test
dim oDocument as object
dim dispatcher as object

dim pdfVersion as integer
dim useTaggedPdf as boolean

if method = "pdfa" OR method = "tagged" then
    if method = "pdfa" then
        pdfVersion = 1
    else
        pdfVersion = 0
    end if
    useTaggedPdf = true
else
    pdfVersion = 0
    useTaggedPdf = false
end if

if FileExists(sDocUrl) then

    oDocument = starDesktop.loadComponentFromUrl(convertToUrl(sDocUrl), "_blank", 0, Array())
    dispatcher = createUnoService("com.sun.star.frame.DispatchHelper")

    if updateIndex then
        dispatcher.executeDispatch(oDocument.CurrentController.Frame, ".uno:UpdateAllIndexes", "", 0, Array())
    end if

    pdfFilterData() = Array((MakePropertyValue("UseLosslessCompression", false)))
    AddPropertyValue(pdfFilterData,"Quality",0.90)
    AddPropertyValue(pdfFilterData,"Quality",90)
    AddPropertyValue(pdfFilterData,"ReduceImageResolution",false)
    AddPropertyValue(pdfFilterData,"MaxImageResolution",1200)
    AddPropertyValue(pdfFilterData,"UseTaggedPDF",useTaggedPdf)
    AddPropertyValue(pdfFilterData,"SelectPdfVersion",pdfVersion)
    AddPropertyValue(pdfFilterData,"ExportNotes",false)
    AddPropertyValue(pdfFilterData,"ViewPDFAfterExport",false)
    AddPropertyValue(pdfFilterData,"ExportBookmarks",true)
    AddPropertyValue(pdfFilterData,"OpenBookmarkLevels",-1)
    AddPropertyValue(pdfFilterData,"UseTransitionEffects",true)
    AddPropertyValue(pdfFilterData,"IsSkipEmptyPages",true)
    AddPropertyValue(pdfFilterData,"ExportPlaceholders",false)
    AddPropertyValue(pdfFilterData,"IsAddStream",false)
    AddPropertyValue(pdfFilterData,"FormsType",0)
    AddPropertyValue(pdfFilterData,"ExportFormFields",true)
    AddPropertyValue(pdfFilterData,"AllowDuplicateFieldNames",false)
    AddPropertyValue(pdfFilterData,"HideViewerToolbar",false)
    AddPropertyValue(pdfFilterData,"HideViewerMenubar",false)
    AddPropertyValue(pdfFilterData,"HideViewerWindowControls",false)
    AddPropertyValue(pdfFilterData,"ResizeWindowToInitialPage",false)
    AddPropertyValue(pdfFilterData,"CenterWindow",false)
    AddPropertyValue(pdfFilterData,"OpenInFullScreenMode",false)
    AddPropertyValue(pdfFilterData,"DisplayPDFDocumentTitle",true)
    AddPropertyValue(pdfFilterData,"InitialView",0)
    AddPropertyValue(pdfFilterData,"Magnification",0)
    AddPropertyValue(pdfFilterData,"Zoom",100)
    AddPropertyValue(pdfFilterData,"PageLayout",0)
    AddPropertyValue(pdfFilterData,"FirstPageOnLeft",false)
    AddPropertyValue(pdfFilterData,"InitialPage",1)
    AddPropertyValue(pdfFilterData,"Printing",2)
    AddPropertyValue(pdfFilterData,"Changes",4)
    AddPropertyValue(pdfFilterData,"EnableCopyingOfContent",true)
    AddPropertyValue(pdfFilterData,"EnableTextAccessForAccessibilityTools",true)
    AddPropertyValue(pdfFilterData,"ExportLinksRelativeFsys",true)
    AddPropertyValue(pdfFilterData,"PDFViewSelection",0)
    AddPropertyValue(pdfFilterData,"ConvertOOoTargetToPDFTarget",false)
    AddPropertyValue(pdfFilterData,"ExportBookmarksToPDFDestination",false)
    AddPropertyValue(pdfFilterData,"SignPDF",false)
    AddPropertyValue(pdfFilterData,"_OkButtonString","")
    AddPropertyValue(pdfFilterData,"Watermark","")
    AddPropertyValue(pdfFilterData,"EncryptFile",false)
    AddPropertyValue(pdfFilterData,"PreparedPasswords","")
    AddPropertyValue(pdfFilterData,"RestrictPermissions",false)
    AddPropertyValue(pdfFilterData,"PreparedPermissionPassword",Array())
    AddPropertyValue(pdfFilterData,"SignatureLocation","")
    AddPropertyValue(pdfFilterData,"SignatureReason","")
    AddPropertyValue(pdfFilterData,"SignatureContactInfo","")
    AddPropertyValue(pdfFilterData,"SignaturePassword","")
    AddPropertyValue(pdfFilterData,"SignatureCertificate","")
    AddPropertyValue(pdfFilterData,"SignatureTSA","")
    AddPropertyValue(pdfFilterData,"UseReferenceXObject",false)

    oExport = Array(MakePropertyValue("Overwrite", True), MakePropertyValue("FilterName", "writer_pdf_Export"), MakePropertyValue("FilterData", pdfFilterData))

    GlobalScope.BasicLibraries.LoadLibrary("Tools")

    oDocument.storeToURL(convertToUrl(sPdfURL), oExport)

end if

Wait 400
ThisComponent.close(True)
Wait 400
starDesktop.terminate

end sub
</script:module>
